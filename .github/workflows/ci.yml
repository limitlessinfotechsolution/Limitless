name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=package.json

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Code Quality and Linting
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript type check
      run: npm run type-check

    - name: Run Prettier check
      run: npx prettier --check .

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests with coverage
      run: npm run test:coverage

    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  # API Testing
  api-test:
    name: API Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start test server
      run: npm run start:test &
      env:
        PORT: 3001

    - name: Wait for server to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done' || echo "Health check failed, continuing..."

    - name: Run API tests with Newman
      run: |
        if [ -f "chatbot-api.yaml" ]; then
          npm install -g newman
          newman run chatbot-api.yaml --environment prod.postman_environment.json || echo "Newman tests failed, continuing..."
        else
          echo "API test file not found, skipping Newman tests"
        fi

    - name: Run Lighthouse performance audit
      run: |
        if [ -f ".lighthouserc.json" ]; then
          npx lighthouse http://localhost:3001 --output=json --output-path=./lighthouse-report.json || echo "Lighthouse audit failed, continuing..."
        else
          echo "Lighthouse config not found, skipping audit"
        fi

  # Build and Artifact Generation
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nextjs-build
        path: .next
        retention-days: 7

    - name: Upload static files
      uses: actions/upload-artifact@v4
      with:
        name: static-files
        path: public
        retention-days: 7

  # Performance Testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run k6 load testing
      run: |
        if [ -f "tests/performance/load-test.js" ]; then
          npm install -g k6
          k6 run tests/performance/load-test.js || echo "k6 load test failed, continuing..."
        else
          echo "Performance test file not found, skipping load testing"
        fi

  # Accessibility Testing
  accessibility-test:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: nextjs-build
        path: .next

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start production server
      run: npm run start &
      env:
        PORT: 3000

    - name: Wait for server
      run: timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 2; done' || echo "Server not ready, continuing..."

    - name: Run axe accessibility tests
      run: |
        if command -v axe >/dev/null 2>&1; then
          axe http://localhost:3000 --save axe-results.json || echo "Axe accessibility test failed, continuing..."
        else
          echo "Axe CLI not available, skipping accessibility tests"
        fi

    - name: Upload accessibility results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-results
        path: axe-results.json

  # Code Quality Analysis
  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run SonarQube analysis
      uses: SonarSource/sonarqube-scan-action@v4
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Self-Learning and Feedback
  feedback-analysis:
    name: CI Feedback Analysis
    runs-on: ubuntu-latest
    if: always()
    needs: [security-scan, lint-and-type-check, test, api-test, performance-test, accessibility-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Analyze CI results
      run: |
        echo "Analyzing CI pipeline performance and generating insights..."
        # This would analyze job results and generate feedback
        # For now, just log completion
        echo "CI pipeline completed. Analyzing results for improvements..."

    - name: Generate CI insights
      run: |
        echo "## CI Pipeline Insights" >> ci-insights.md
        echo "- Build time: $(date)" >> ci-insights.md
        echo "- Security scan: ${{ needs.security-scan.result }}" >> ci-insights.md
        echo "- Lint & type check: ${{ needs.lint-and-type-check.result }}" >> ci-insights.md
        echo "- Tests: ${{ needs.test.result }}" >> ci-insights.md
        echo "- API tests: ${{ needs.api-test.result }}" >> ci-insights.md
        echo "- Performance tests: ${{ needs.performance-test.result }}" >> ci-insights.md
        echo "- Accessibility tests: ${{ needs.accessibility-test.result }}" >> ci-insights.md

    - name: Upload insights
      uses: actions/upload-artifact@v4
      with:
        name: ci-insights
        path: ci-insights.md

  # Final status check
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-type-check, test, api-test, build, performance-test, accessibility-test, sonar-analysis]
    if: success()
    steps:
    - name: CI Pipeline completed successfully
      run: echo "All CI checks passed! Ready for deployment."

    - name: Create deployment trigger
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: echo "deployment-ready=true" >> $GITHUB_OUTPUT
      id: deployment-trigger
